integrations:
- integration_type: git_repo
  git_repo: mosaicml/llm-foundry
  git_branch: v0.8.0
  # git_commit: # OR use your commit hash
  pip_install: .[gpu]
  ssh_clone: false  # Should be true if using a private repo

## Monitoring
#- integration_type: wandb
#  project: WANDB_PROJECT_NAME
#  entity: WANDB_ENTITY_NAME

env_variables:
  MCLI_TIMEOUT: 3600
  NCCL_SOCKET_TIMEOUT: 3600

command: |
  pip install peft
  cd llm-foundry/scripts
  composer train/train.py /mnt/config/parameters.yaml
image: mosaicml/llm-foundry:2.3.0_cu121_flash2-latest
name: lynx-70b-instruct

compute:
  # Note: Finetuning the 70b model requires at least 16x80GB GPUs
  gpus: 32  # Number of GPUs to use
  ## These configurations are optional
  cluster: CLUSTER_NAME # Name of the cluster to use for this run
  # gpu_type: a100_80gb # Type of GPU to use. We use a100_80gb in our experiments

# The below is injected as a YAML file: /mnt/config/parameters.yaml
parameters:
  tokenizer_name: HF_TOKENIZER_PATH
  max_seq_len: 8000
  global_seed: 17

  # Run Name
  run_name: # If left blank, will be read from env var $RUN_NAME

  max_split_size_mb: 512

  # Model
  model:
    name: hf_causal_lm
    init_device: mixed
    pretrained_model_name_or_path: HF_USER/HF_MODEL_REPOSITORY_NAME
    pretrained: true
    # Note: you must have set the HUGGING_FACE_HUB_TOKEN environment variable and have access to the llama2 models
    # peft_config:
    #   r: 64
    #   peft_type: LORA
    #   task_type: CAUSAL_LM
    #   lora_alpha: 128
    #   lora_dropout: 0.05
    #   target_modules:
    #     - Wqkv

    use_auth_token: true
    use_flash_attention_2: true

  # Tokenizer
  tokenizer:
    name: ${tokenizer_name}
    kwargs:
      model_max_length: ${max_seq_len}

   # Dataloaders
  train_loader:
    name: finetuning
    dataset:
      hf_name: HF_USER/HF_DATASET_REPOSITORY_NAME
      split: train
      max_seq_len: ${max_seq_len}
      allow_pad_trimming: false
      decoder_only_format: true
      shuffle: true
    drop_last: false
    num_workers: 8
    pin_memory: false
    prefetch_factor: 2
    persistent_workers: true
    timeout: 0
    task_type: CHAT_COMPLETION

  # Optimization
  scheduler:
    name: cosine_with_warmup
    t_warmup: 100ba
    alpha_f: 0.1

  # Note: You may want to change learning rate, betas, weight decay
  optimizer:
    name: decoupled_lionw
    lr: 5.0e-7
    betas:
    - 0.9
    - 0.95
    weight_decay: 0.0

  algorithms:
    gradient_clipping:
      clipping_type: norm
      clipping_threshold: 1.0

  max_duration: 3ep
  eval_first: false
  eval_interval: 1ep
  eval_subset_num_batches: -1
  global_train_batch_size: 32 # should be divisible by no. of gpus

  # System
  seed: ${global_seed}
  device_eval_batch_size: 1
  device_train_microbatch_size: auto
  precision: amp_bf16

  # FSDP
  fsdp_config:
    sharding_strategy: FULL_SHARD
    mixed_precision: PURE
    activation_checkpointing: true
    activation_checkpointing_reentrant: false
    activation_cpu_offload: false
    limit_all_gathers: true

  # Logging
  progress_bar: false
  log_to_console: true
  console_log_interval: 1ba

  callbacks:
    speed_monitor:
      window_size: 10
    lr_monitor: {}
    memory_monitor: {}
    runtime_estimator: {}

  load_weights_only: true  # Only load the weights, not the optimizer state, LR schedule, etc

#  loggers:
#    wandb: {"project": "WANDB_PROJECT_NAME", "entity": "WANDB_ENTITY_NAME"}

#  # callbacks
#  callbacks:
#    hf_checkpointer:
#      overwrite: true
#      precision: bfloat16
#      save_folder:  s3://S3_BUCKET_NAME/S3_FILEPATH
#      save_interval: 1ep
